# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A6nYUyOabSo3lhooiVweSj0sbW2zrhqa
"""

import pandas as pd
from datetime import datetime
import streamlit as st
import os

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Consulta de Defensas", page_icon="üéì")

# Cargar los datos con manejo de errores mejorado
@st.cache_data
def load_data():
    try:
        # Primero intenta cargar el CSV
        if os.path.exists('Separador_en_Python.csv'):
            df = pd.read_csv('Separador_en_Python.csv', dtype={'CEDULA': str})
            # Convertir la fecha si existe en los datos
            if 'FECHA SIMPLE' in df.columns:
                df['FECHA SIMPLE'] = pd.to_datetime(df['FECHA SIMPLE'])
            return df
        
        # Si no encuentra CSV, intenta con Excel (como fallback)
        elif os.path.exists('Separador en Python.xlsx'):
            try:
                df = pd.read_excel('Separador en Python.xlsx', 
                                  dtype={'CEDULA': str}, 
                                  engine='openpyxl')
            except:
                df = pd.read_excel('Separador en Python.xlsx', 
                                  dtype={'CEDULA': str}, 
                                  engine='xlrd')
            df['FECHA SIMPLE'] = pd.to_datetime(df['FECHA SIMPLE'])
            return df
        
        else:
            st.error("No se encontr√≥ ning√∫n archivo de datos (CSV o Excel)")
            return None
            
    except Exception as e:
        st.error(f"Error al cargar los datos: {str(e)}")
        st.error("Verifique que el archivo existe y tiene el formato correcto.")
        return None

df = load_data()

# Funci√≥n de consulta optimizada
def consultar_defensa(cedula):
    if df is None:
        return None, "Error en los datos. Contacte al administrador."
    
    try:
        estudiante = df[df['CEDULA'].str.strip().str.upper() == cedula.strip().upper()]
        
        if estudiante.empty:
            return None, "No se encontr√≥ ning√∫n estudiante con esa c√©dula."
        
        datos = estudiante.iloc[0]
        hoy = datetime.now().strftime('%Y-%m-%d')
        fecha_defensa = datos['FECHA SIMPLE'].strftime('%Y-%m-%d')
        
        info = {
            'nombre': datos.get('APELLIDOS Y NOMBRES', 'No registrado'),
            'opcion': datos.get('OPCION DE TITULACI√ìN\nEX. COM./TIC/TT', 'No especificada'),
            'fecha': datos['FECHA SIMPLE'].strftime('%d/%m/%Y'),
            'hora': datos.get('HORA', 'No especificada'),
            'enlace': datos.get('ENLACES', '#'),
            'hoy': fecha_defensa == hoy
        }
        
        return info, None
        
    except Exception as e:
        return None, f"Error al procesar la consulta: {str(e)}"

# Interfaz de usuario mejorada
def main():
    st.title("üéì Sistema de Consulta de Defensas de Titulaci√≥n")
    
    with st.expander("‚ÑπÔ∏è Instrucciones"):
        st.write("""
        1. Ingrese su n√∫mero de c√©dula (solo n√∫meros)
        2. Presione el bot√≥n 'Consultar'
        3. Verifique los datos de su defensa
        """)
    
    cedula = st.text_input("Ingrese su n√∫mero de c√©dula (solo n√∫meros):", 
                         max_chars=10,
                         help="Ingrese su c√©dula sin guiones ni puntos")
    
    if st.button("Consultar", type="primary"):
        if cedula and cedula.isdigit():
            with st.spinner("Buscando informaci√≥n..."):
                info, error = consultar_defensa(cedula)
                
                if error:
                    st.error(error)
                else:
                    st.success("Informaci√≥n encontrada:")
                    st.subheader(info['nombre'])
                    
                    cols = st.columns(2)
                    cols[0].write(f"**Opci√≥n de titulaci√≥n:** {info['opcion']}")
                    cols[1].write(f"**Fecha programada:** {info['fecha']}")
                    
                    if info['hoy']:
                        st.balloons()
                        st.warning("‚ö†Ô∏è ¬°Tienes defensa hoy!")
                        cols = st.columns(2)
                        cols[0].write(f"**Hora:** {info['hora']}")
                        cols[1].write(f"**Enlace:** [Acceder aqu√≠]({info['enlace']})")
                    else:
                        st.info(f"Pr√≥xima defensa programada para el {info['fecha']}")
        else:
            st.warning("Por favor ingrese un n√∫mero de c√©dula v√°lido (solo d√≠gitos)")

    st.markdown("---")
    st.caption("¬© Sistema de consulta de defensas - Universidad XYZ")

if __name__ == "__main__":
    main()
